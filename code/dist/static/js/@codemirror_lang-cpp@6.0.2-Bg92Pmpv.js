import{p as n}from"./@lezer_cpp@1.1.2-Cjn7jid_.js";import{L as a,d as o,e as t,f as r,h as i,j as p,k as s,c as m}from"./@codemirror_language@6.10.3-bWXGUccf.js";import"./@lezer_lr@1.4.2-Cz8Me4wy.js";import"./@lezer_common@1.2.3-CP7NCNqd.js";import"./@lezer_highlight@1.2.1-DwVMghhY.js";import"./@codemirror_state@6.4.1-BMFlvjVs.js";import"./@codemirror_view@6.34.3-jfwbSA-b.js";import"./style-mod@4.1.2-Bc2inJdb.js";import"./w3c-keyname@2.2.8-Vcq4gwWv.js";const d=a.define({name:"cpp",parser:n.configure({props:[o.add({IfStatement:t({except:/^\s*({|else\b)/}),TryStatement:t({except:/^\s*({|catch)\b/}),LabeledStatement:r,CaseStatement:e=>e.baseIndent+e.unit,BlockComment:()=>null,CompoundStatement:i({closing:"}"}),Statement:t({except:/^{/})}),p.add({"DeclarationList CompoundStatement EnumeratorList FieldDeclarationList InitializerList":s,BlockComment(e){return{from:e.from+2,to:e.to-2}}})]}),languageData:{commentTokens:{line:"//",block:{open:"/*",close:"*/"}},indentOnInput:/^\s*(?:case |default:|\{|\})$/,closeBrackets:{stringPrefixes:["L","u","U","u8","LR","UR","uR","u8R","R"]}}});function R(){return new m(d)}export{R as cpp,d as cppLanguage};
